usethis::use_vignette("how_to_use_gwhap")
usethis::use_build_ignore("devtools_history.R")
#
system.file("data", "imp_DACT1_example.txt", package = "gwhap")
#
system.file("", "imp_DACT1_example.txt", package = "gwhap")
#
system.file("", "imp_DACT1_example.txt", package = "gwhap", mustWork = TRUE)
#
x <- sample(1000)
devtools::use_data(x, "imp_DACT1_example.txt", internal = TRUE)
usethis::use_data(x, "imp_DACT1_example.txt", internal = TRUE)
devtools::use_data(x, "imp_DACT1_example.txt", internal = TRUE)
data( "imp_DACT1_example.txt")
snp_list = read_csv("~/workspace/projects/gwhap/data/imp_DACT1_example.txt", col_names=c('chromosome', 'snp', 'bp'))
library(data.table)
snp_list = read_csv("~/workspace/projects/gwhap/data/imp_DACT1_example.txt", col_names=c('chromosome', 'snp', 'bp'))
library(readr)
snp_list = read_csv("~/workspace/projects/gwhap/data/imp_DACT1_example.txt", col_names=c('chromosome', 'snp', 'bp'))
snp_list = read_csv("~/workspace/projects/gwhap/data/imp_DACT1_example.txt")
snp_list
?read_csv
snp_list = read_tsv("~/workspace/projects/gwhap/data/imp_DACT1_example.txt", )
snp_list
# Launch and use
library(gwhap)
# Update the genetic map
to_be_updated_genetic_map_path="~/workspace/projects/gwhap/data/imp_DACT1_example.txt"
rutgers_map = '/neurospin/brainomics/bio_ressoucres/rutgers_map_v3/'
gen_map_updated = genetic_map_update(genetic_map_path=rutgers_map, to_be_updated_genetic_map_path=to_be_updated_genetic_map_path)
# Update the genetic map
to_be_updated_genetic_map_path="~/workspace/projects/gwhap/data/SNP_DACT1.csv"
rutgers_map = '/neurospin/brainomics/bio_ressoucres/rutgers_map_v3/'
gen_map_updated = genetic_map_update(genetic_map_path=rutgers_map, to_be_updated_genetic_map_path=to_be_updated_genetic_map_path)
rutgers_map = '/neurospin/brainomics/bio_ressoucres/rutgers_map_v3'
gen_map_updated = genetic_map_update(genetic_map_path=rutgers_map, to_be_updated_genetic_map_path=to_be_updated_genetic_map_path)
# Update the genetic map
to_be_updated_genetic_map_path="~/workspace/projects/gwhap/data/SNP_DACT1.csv"
rutgers_map = '~/workspace/data/runtgers_map'
gen_map_updated = genetic_map_update(genetic_map_path=rutgers_map, to_be_updated_genetic_map_path=to_be_updated_genetic_map_path)
gen_map_updated
# Create blocks
# Get the object or the blocks are wrote and i should reload them ?
# make a loop for different value of delta
output='~/workspace/data/outputs'
create_blocs(genetics_map_path=gen_map_updated, output=, delta=1e-3)
create_blocs(genetics_map_path=gen_map_updated, output=output, delta=1e-3)
# Installation of `gwhap`
if (!require(devtools)){install.packages("devtools")}
devtools::install_github("yasmina-mekki/gwhap")
# Launch and use
library(gwhap)
# Update the genetic map
to_be_updated_genetic_map_path="~/workspace/projects/gwhap/data/SNP_DACT1.csv"
rutgers_map = '~/workspace/data/runtgers_map'
gen_map_updated = genetic_map_update(genetic_map_path=rutgers_map, to_be_updated_genetic_map_path=to_be_updated_genetic_map_path)
# Create blocks
# Get the object or the blocks are wrote and i should reload them ?
# make a loop for different value of delta
output='~/workspace/data/outputs'
create_blocs(genetics_map_path=gen_map_updated, output=output, delta=1e-3)
remove.packages{gwhap}
remove.packages(gwhap)
library(utils)
remove.packages(gwhap)
?create_blocs
uninstall(gwhap)
devtools::install_github("yasmina-mekki/gwhap")
devtools::install_github("yasmina-mekki/gwhap", force = TRUE)
create_blocs(genetics_map_path=gen_map_updated, output=output, delta=1e-3)
devtools::install_github("yasmina-mekki/gwhap", force = TRUE)
# Launch and use
library(gwhap)
# Update the genetic map
to_be_updated_genetic_map_path="~/workspace/projects/gwhap/data/SNP_DACT1.csv"
rutgers_map = '~/workspace/data/runtgers_map'
gen_map_updated = genetic_map_update(genetic_map_path=rutgers_map, to_be_updated_genetic_map_path=to_be_updated_genetic_map_path)
# Create blocks
# Get the object or the blocks are wrote and i should reload them ?
# make a loop for different value of delta
output='~/workspace/data/outputs'
create_blocs(genetics_map_path=gen_map_updated, output=output, delta=1e-3)
output='~/workspace/data/outputs'
bloc_df = c()
delta=1e-3
for (chr in unique(genetics_map$chromosome)){
idx_chr  = genetics_map$chromosome == chr
start_cm = genetics_map$cm[idx_chr]
position  = genetics_map$position[idx_chr]
from_bp   = position[c(1, length(position))][1]
to_bp     = position[c(1, length(position))][2]
ft        = position
cut = (which(diff(start_cm) > delta))
start_w = c(1, cut+1)
end_w   = c(cut, length(start_cm))
size_ok = start_w < end_w
start_w = start_w[size_ok]
end_w   = end_w[size_ok]
from_cm = start_cm[start_w]
to_cm   = start_cm[end_w]
from_bp = position[start_w]
to_bp   = position[end_w]
win_size  = apply(data.frame(from_cm, to_cm), 1, diff)
bloc_df = rbind(bloc_df, data.frame(start_w, end_w,
win_size,
from_bp, to_bp,
from_cm, to_cm,
chr, delta))
#write.table(x=bloc_df, file=file.path(output, past(chr, 'bloc')))
}
create_blocs(genetics_map=gen_map_updated, output=output, delta=1e-3)
genetics_map=gen_map_update
genetics_map=gen_map_updated
for (chr in unique(genetics_map$chromosome)){
idx_chr  = genetics_map$chromosome == chr
start_cm = genetics_map$cm[idx_chr]
position  = genetics_map$position[idx_chr]
from_bp   = position[c(1, length(position))][1]
to_bp     = position[c(1, length(position))][2]
ft        = position
cut = (which(diff(start_cm) > delta))
start_w = c(1, cut+1)
end_w   = c(cut, length(start_cm))
size_ok = start_w < end_w
start_w = start_w[size_ok]
end_w   = end_w[size_ok]
from_cm = start_cm[start_w]
to_cm   = start_cm[end_w]
from_bp = position[start_w]
to_bp   = position[end_w]
win_size  = apply(data.frame(from_cm, to_cm), 1, diff)
bloc_df = rbind(bloc_df, data.frame(start_w, end_w,
win_size,
from_bp, to_bp,
from_cm, to_cm,
chr, delta))
#write.table(x=bloc_df, file=file.path(output, past(chr, 'bloc')))
}
genetics_map
output='~/workspace/data/outputs'
bloc_df = c()
delta=1e-3
genetics_map=gen_map_updated
for (chr in unique(genetics_map$chr)){
idx_chr  = genetics_map$chr == chr
start_cm = genetics_map$cm[idx_chr]
position  = genetics_map$pos[idx_chr]
from_bp   = position[c(1, length(pos))][1]
to_bp     = position[c(1, length(pos))][2]
ft        = position
cut = (which(diff(start_cm) > delta))
start_w = c(1, cut+1)
end_w   = c(cut, length(start_cm))
size_ok = start_w < end_w
start_w = start_w[size_ok]
end_w   = end_w[size_ok]
from_cm = start_cm[start_w]
to_cm   = start_cm[end_w]
from_bp = position[start_w]
to_bp   = position[end_w]
win_size  = apply(data.frame(from_cm, to_cm), 1, diff)
bloc_df = rbind(bloc_df, data.frame(start_w, end_w,
win_size,
from_bp, to_bp,
from_cm, to_cm,
chr, delta))
#write.table(x=bloc_df, file=file.path(output, past(chr, 'bloc')))
}
bloc_df = c()
# remove gaps greater than delta cM
for (chr in unique(genetics_map$chr)){
idx_chr  = genetics_map$chr == chr
start_cm = genetics_map$cm[idx_chr]
position  = genetics_map$pos[idx_chr]
from_bp   = position[c(1, length(position))][1]
to_bp     = position[c(1, length(position))][2]
ft        = position
cut = (which(diff(start_cm) > delta))
start_w = c(1, cut+1)
end_w   = c(cut, length(start_cm))
size_ok = start_w < end_w
start_w = start_w[size_ok]
end_w   = end_w[size_ok]
from_cm = start_cm[start_w]
to_cm   = start_cm[end_w]
from_bp = position[start_w]
to_bp   = position[end_w]
win_size  = apply(data.frame(from_cm, to_cm), 1, diff)
bloc_df = rbind(bloc_df, data.frame(start_w, end_w,
win_size,
from_bp, to_bp,
from_cm, to_cm,
chr, delta))
#write.table(x=bloc_df, file=file.path(output, past(chr, 'bloc')))
}
output='~/workspace/data/outputs'
bloc_df = c()
delta=1e-3
genetics_map=gen_map_updated
for (chr in unique(genetics_map$chr)){
idx_chr  = genetics_map$chr == chr
start_cm = genetics_map$cm[idx_chr]
position  = genetics_map$pos[idx_chr]
from_bp   = position[c(1, length(position))][1]
to_bp     = position[c(1, length(position))][2]
ft        = position
cut = (which(diff(start_cm) > delta))
start_w = c(1, cut+1)
end_w   = c(cut, length(start_cm))
size_ok = start_w < end_w
start_w = start_w[size_ok]
end_w   = end_w[size_ok]
from_cm = start_cm[start_w]
to_cm   = start_cm[end_w]
from_bp = position[start_w]
to_bp   = position[end_w]
win_size  = apply(data.frame(from_cm, to_cm), 1, diff)
bloc_df = rbind(bloc_df, data.frame(start_w, end_w,
win_size,
from_bp, to_bp,
from_cm, to_cm,
chr, delta))
#write.table(x=bloc_df, file=file.path(output, past(chr, 'bloc')))
}
output='~/workspace/data/outputs'
bloc_df = c()
delta=1e-3
genetics_map=gen_map_updated
for (chr in unique(genetics_map$chr)){
idxchr=genetics_map$chr==chr
startcM=genetics_map$cM[idxchr]
position=genetics_map$pos[idxchr]
ft = position[c(1, length(position))]
fromBp=ft[1];
toBp=ft[2];
ft = position
cut=(which(diff(startcM)>min_cM))
startW=c(1,cut+1)
endW=c(cut,length(startcM))
sizeOK=startW<endW
startW=startW[sizeOK]
endW=endW[sizeOK]
fromCM=startcM[startW]
toCM=startcM[endW]
fromBp=position[startW]
toBp=position[endW]
winsz=apply(data.frame(fromCM,toCM),1,diff)
winDF=rbind(winDF,
data.frame(
startW,
endW,
winsz,
fromBp,
toBp,
fromCM,
toCM,
chr,
min_cM)
)
}
#delta=1e-3
min_cM=1e-3
for (chr in unique(genetics_map$chr)){
idxchr=genetics_map$chr==chr
startcM=genetics_map$cM[idxchr]
position=genetics_map$pos[idxchr]
ft = position[c(1, length(position))]
fromBp=ft[1];
toBp=ft[2];
ft = position
cut=(which(diff(startcM)>min_cM))
startW=c(1,cut+1)
endW=c(cut,length(startcM))
sizeOK=startW<endW
startW=startW[sizeOK]
endW=endW[sizeOK]
fromCM=startcM[startW]
toCM=startcM[endW]
fromBp=position[startW]
toBp=position[endW]
winsz=apply(data.frame(fromCM,toCM),1,diff)
winDF=rbind(winDF,
data.frame(
startW,
endW,
winsz,
fromBp,
toBp,
fromCM,
toCM,
chr,
min_cM)
)
}
winDF = c()
genetics_map=gen_map_updated
for (chr in unique(genetics_map$chr)){
idxchr=genetics_map$chr==chr
startcM=genetics_map$cM[idxchr]
position=genetics_map$pos[idxchr]
ft = position[c(1, length(position))]
fromBp=ft[1];
toBp=ft[2];
ft = position
cut=(which(diff(startcM)>min_cM))
startW=c(1,cut+1)
endW=c(cut,length(startcM))
sizeOK=startW<endW
startW=startW[sizeOK]
endW=endW[sizeOK]
fromCM=startcM[startW]
toCM=startcM[endW]
fromBp=position[startW]
toBp=position[endW]
winsz=apply(data.frame(fromCM,toCM),1,diff)
winDF=rbind(winDF,
data.frame(
startW,
endW,
winsz,
fromBp,
toBp,
fromCM,
toCM,
chr,
min_cM)
)
}
winDF$
# Phenotypes plot
phenotype_distribution()
winDF.head()
head(winDF)
output='~/workspace/data/outputs'
bloc_df = c()
delta=1e-3
genetics_map=gen_map_updated
for (chr in unique(genetics_map$chr)){
idx_chr  = genetics_map$chr == chr
start_cm = genetics_map$cM[idx_chr]
position = genetics_map$pos[idx_chr]
ft       = position[c(1, length(position))]
from_bp  = ft[1];
to_bp    = ft[2];
ft       = position
cut=(which(diff(start_cm)>delta))
start_w = c(1,cut+1)
end_w   = c(cut,length(start_cm))
size_ok  = start_w<end_w
start_w = start_w[size_ok]
end_w   = end_w[size_ok]
from_cm  = start_cm[start_w]
to_cm    = start_cm[end_w]
from_bp  = position[start_w]
to_bp    = position[end_w]
win_size = apply(data.frame(from_cm,to_cm),1,diff)
bloc_df  = rbind(bloc_df,
data.frame(
start_w,
end_w,
win_size,
from_bp,
to_bp,
from_cm,
to_cm,
chr,
delta)
)
}
head(bloc_df)
devtools::install_github("yasmina-mekki/gwhap", force = TRUE)
# Launch and use
library(gwhap)
# Update the genetic map
to_be_updated_genetic_map_path="~/workspace/projects/gwhap/data/SNP_DACT1.csv"
rutgers_map = '~/workspace/data/runtgers_map'
gen_map_updated = genetic_map_update(genetic_map_path=rutgers_map, to_be_updated_genetic_map_path=to_be_updated_genetic_map_path)
df_blocks = create_blocs(genetics_map=gen_map_updated, delta=1e-3)
head(gen_map_updated)
?create_blocs
devtools::install_github("yasmina-mekki/gwhap", force = TRUE)
# Launch and use
library(gwhap)
# Update the genetic map
to_be_updated_genetic_map_path="~/workspace/projects/gwhap/data/SNP_DACT1.csv"
rutgers_map = '~/workspace/data/runtgers_map'
gen_map_updated = genetic_map_update(genetic_map_path=rutgers_map, to_be_updated_genetic_map_path=to_be_updated_genetic_map_path)
df_blocks = create_blocs(genetics_map=gen_map_updated, delta=1e-3)
create_blocs_2 <- function(genetics_map, delta=1e-3){
bloc_df = c()
# remove gaps greater than delta cm
for (chr in unique(genetics_map$chr)){
idx_chr  = genetics_map$chr == chr
start_cm = genetics_map$cM[idx_chr]
position = genetics_map$pos[idx_chr]
ft       = position[c(1, length(position))]
from_bp  = ft[1];
to_bp    = ft[2];
ft       = position
cut = (which(diff(start_cm) > delta))
start_w = c(1, cut+1)
end_w   = c(cut, length(start_cm))
size_ok = start_w < end_w
start_w = start_w[size_ok]
end_w   = end_w[size_ok]
from_cm  = start_cm[start_w]
to_cm    = start_cm[end_w]
from_bp  = position[start_w]
to_bp    = position[end_w]
win_size = apply(data.frame(from_cm, to_cm), 1, diff)
bloc_df  = rbind(bloc_df, data.frame(start_w, end_w, win_size, from_bp, to_bp, from_cm, to_cm, chr, delta))
}
return(bloc_df)
}
df_blocks = create_blocs_2(genetics_map=gen_map_updated, delta=1e-3)
head(df_blocks)
tail(df_blocks)
df_blocks
usethis::use_package("data.table")
usethis::use_package("readr")
usethis::use_package("ggplot2")
usethis::use_build_ignore("devtools_history.R")
usethis::use_package("data.table")
usethis::use_package("readr")
usethis::use_package("ggplot2")
usethis::use_build_ignore("devtools_history.R")
devtools::install_github("yasmina-mekki/gwhap", force = TRUE)
# Launch and use
library(gwhap)
# Update the genetic map
to_be_updated_genetic_map_path = "~/workspace/projects/gwhap/data/SNP_DACT1.csv"
rutgers_map = '~/workspace/data/runtgers_map'
gen_map_updated = genetic_map_update(genetic_map_path=rutgers_map, to_be_updated_genetic_map_path=to_be_updated_genetic_map_path)
# Create blocks
df_blocks = create_blocks(genetics_map=gen_map_updated, delta=1e-3)
# Phenotypes plot
phenotypes_path = Sys.glob(file.path("~/workspace/projects/gwhap/data/ln_partial_correlation_eth_white/" , '*'))
phenotype_distribution(phenotypes_path = phenotypes_path)
ggplot = phenotype_distribution(phenotypes_path = phenotypes_path)
phenotype_distribution_plot = phenotype_distribution(phenotypes_path = phenotypes_path)
df_blocks
ggplot(df_blocks, aes(x=to_bp-from_bp, fill=delta)) + geom_density(alpha = 0.4)
library(ggplot2)
ggplot(df_blocks, aes(x=to_bp-from_bp, fill=delta)) + geom_density(alpha = 0.4)
ggplot(df_blocks, aes(x=win_size, fill=delta)) + geom_density(alpha = 0.4)
# multiple values of delta
delats = c(1e-3, 2.5e-3, 5e-3, 7.5e-3, 1e-2, 2.5e-2)
dfs_blocks = data.frame()
for(delta in deltas){
df_blocks_tmp = create_blocks(genetics_map=gen_map_updated, delta=delta)
dfs_blocks <- rbind(dfs_blocks, df_blocks_tmp)
}
# multiple values of delta
deltas = c(1e-3, 2.5e-3, 5e-3, 7.5e-3, 1e-2, 2.5e-2)
dfs_blocks = data.frame()
for(delta in deltas){
df_blocks_tmp = create_blocks(genetics_map=gen_map_updated, delta=delta)
dfs_blocks <- rbind(dfs_blocks, df_blocks_tmp)
}
ggplot(dfs_blocks, aes(x=win_size, fill=delta)) + geom_density(alpha = 0.4)
dfs_blocks
# multiple values of delta
deltas = c(1e-3, 2.5e-3, 5e-3, 7.5e-3)
dfs_blocks = data.frame()
for(delta in deltas){
df_blocks_tmp = create_blocks(genetics_map=gen_map_updated, delta=delta)
dfs_blocks <- rbind(dfs_blocks, df_blocks_tmp)
}
ggplot(dfs_blocks, aes(x=win_size, fill=delta)) + geom_density(alpha = 0.4)
devtools::install_github("yasmina-mekki/gwhap", force = TRUE)
# Launch and use
library(gwhap)
# Update the genetic map
to_be_updated_genetic_map_path = "~/workspace/projects/gwhap/data/SNP_DACT1.csv"
rutgers_map = '~/workspace/data/runtgers_map'
gen_map_updated = genetic_map_update(genetic_map_path=rutgers_map, to_be_updated_genetic_map_path=to_be_updated_genetic_map_path)
# Create blocks
df_blocks = create_blocks(genetics_map=gen_map_updated, delta=1e-3)
df_blocks
# Phenotypes plot
phenotypes_path = Sys.glob(file.path("~/workspace/projects/gwhap/data/ln_partial_correlation_eth_white/" , '*'))
phenotype_distribution_plot = phenotype_distribution(phenotypes_path = phenotypes_path)
phenotype_distribution(phenotypes_path = phenotypes_path)
phenotype_distribution_plot = phenotype_distribution(phenotypes_path = phenotypes_path)
phenotype_distribution_plot
